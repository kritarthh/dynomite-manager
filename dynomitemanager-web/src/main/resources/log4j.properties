## Standard logging configuration.
# By default Keystone/Chukwa is not enabled as an appender, please enable it if you wish.
# Chukwa is our Data Pipeline logger that you can write to using the Keystone API (go/keystone).
# To enable, replace the following line with this:
# log4j.rootCategory=INFO,CONSOLE,CUSTOM_EVENTS,REQUEST_BASED_LOGGING

log4j.rootCategory=INFO,CONSOLE

log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.layout.ConversionPattern=[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %m%n
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout

## Quieting noisy 3rd party and legacy Netflix platform loggers by default.
log4j.logger.httpclient=INFO
log4j.logger.com.netflix.discovery=INFO
log4j.logger.com.netflix.config=INFO
log4j.logger.com.netflix.monitoring=INFO
log4j.logger.com.netflix.server.base.epic.RequestStats=OFF,CONSOLE
log4j.logger.com.netflix.server.base.RequestStats=INFO
log4j.logger.com.netflix.eventbus.impl=INFO
log4j.logger.com.netflix.atlas.plugin=INFO

## Our service logger configurations.
log4j.logger.com.netflix.florida=DEBUG

# Cassandra loggers
log4j.logger.com.datastax.driver=ERROR
log4j.logger.com.netflix.aeneas=ERROR

### Netflix Application configurations required for deployment.

# AWS environment: test or prod? The default if not set is "test".
# On deployment it's set to the "baked" NETFLIX_ENVIRONMENT env variable. Please don't modify.
netflix.environment=${NETFLIX_ENVIRONMENT}
# AWS region. We default if not set is "us-east-1" which is where we typically test.
# On deployment it's set to the "baked" EC2_REGION env variable. Please don't modify.
netflix.region=${EC2_REGION}
# The netflix stack your application is running in.  Default is no stack.
netflix.stack=${NETFLIX_STACK}
# The name of your service. This name will also match your Spinnaker generated deployment name.
# That's the name that you will be known in Discovery. If you modify it you will also need to
# modify your Spinnaker config.
netflix.appinfo.name=${NETFLIX_APP:nemo}
# VIP address has been traditionally used as a lookup "rulebook" for a service that wants
# to discover another service. Below you are saying to anyone looking for your service:
# "You can find my instances first at the same stack you're deployed at
#  but if I'm not deployed there then look at the general service name under the environment".
# Typical stack names are "test", "dev", "staging". They are decided offline between service owners.
netflix.appinfo.vipAddress=${netflix.appinfo.name}${NETFLIX_STACK:}

## Application info
netflix.appinfo.statusPageUrlPath=/REST/v1/admin/Status
netflix.appinfo.homePageUrlPath=/REST/v1/admin/Status
netflix.appinfo.healthCheckUrlPath=/healthcheck
netflix.appinfo.port=8080

## Standard URLs that Discovery will add to your service metadata and make it easy to check up on
## deployed instances.
# Service home page. You can put anything you like there and rename the path.
netflix.appinfo.homePageUrlPath=/index.html
# URL to check if an instance is healthy. It is tied to your healthcheck indicators.
#The path is expected to be "/healthcheck".
# Please don't modify.
netflix.appinfo.healthCheckUrlPath=/healthcheck

## Jersey configurations
# Let's add our endpoints that are in the /REST path.
com.sun.jersey.config.property.packages=com.netflix.florida

### Our own service configuration



### Cassandra Aeneas Cluster config.

# Properties must use a prefix that matches our cluster name in the CassandraModule.
# As you add more clusters you can have multiple sets of properties prefixed by the cluster name.
# Here is an example property that you can uncomment and try:
# cass_sandbox.aeneas.nativePort=7104
# For a full list of properties please visit: http://go/aeneas
